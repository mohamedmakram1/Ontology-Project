package com.mycompany.sparql;
import org.apache.jena.query.*;
import org.apache.jena.rdf.model.*;
import javax.swing.*;
import org.apache.jena.query.Query;
import org.apache.jena.query.QueryExecution;
import org.apache.jena.query.QueryExecutionFactory;
import org.apache.jena.query.QueryFactory;
import org.apache.jena.rdf.model.Model;
import org.apache.jena.rdf.model.RDFNode;
import org.apache.jena.query.QuerySolution;
import org.apache.jena.rdf.model.Resource;
import org.apache.jena.rdf.model.ModelFactory;
/**
 *
 * @author makram
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    private Model model;
    public GUI() {
        initComponents();
        // Load the ontology file into the model
        String file = "C:/uni.owl";
        model = ModelFactory.createOntologyModel();
        model.read(file);
        
  
   
        //Combo box setteing 
       jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{
           "ASU Staff", "University ALL Instanceses", "ASU Departments","2-Optional Graph Patterns",
           "ASK Query","Descripe Query","CONSTRUCT","Conjunctions"
       }));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        textArea1 = new java.awt.TextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setBackground(new java.awt.Color(204, 255, 255));
        jButton1.setFont(new java.awt.Font("Stencil", 0, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 0, 51));
        jButton1.setText("Execute");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(204, 255, 255));
        jLabel1.setFont(new java.awt.Font("Stencil", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 51, 0));
        jLabel1.setText("SPARQL QUERY");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Stencil", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 0, 51));
        jLabel2.setText("Choose Query");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(textArea1, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 87, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(76, 76, 76))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                        .addComponent(textArea1, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
     //Declare a variable string                                                                    
     String queryString = "";
     //link combo box options with switch case
    int selectedQuery = jComboBox1.getSelectedIndex();
     // Define the prefixes that we will use
     String prefixes = "PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n" +
                       "PREFIX sou: <http://www.semanticweb.org/kayeg/ontologies/2023/4/UniversityOntologyV1#>\n";
    // Select the SPARQL query based on the selected option in the combo box
    switch (selectedQuery) {
        case 0:
            // Select query to show names of the whole staff in ASU
            queryString =prefixes+"SELECT DISTINCT?StaffName WHERE {?ASU sou:hasStaff?StaffName}";
            break;
        case 1:
            //Select query to show all instances of class University
           queryString=prefixes+"SELECT ?AllInstances WHERE { ?AllInstances rdf:type sou:University}";
            break;
 
        case 2:
            //Select query to show ASU departments and the number of undergradute students in each department
            queryString = prefixes+"SELECT ?ASU_Departments (COUNT(?student) as?studentCount)\n"
                                              +"WHERE {\n"
                                              +"?ASU sou:hasDepartment?ASU_Departments.\n" +
                                               "?student rdf:type sou:UndergraduateStudent.\n"+
                                               "?ASU_Departments sou:hasStudents?student.}GROUP BY?ASU_Departments";
            break;

        case 3:
            // 2 options query which show name of undergradute students and birth data of students takes course_A1,
           //and GPA if it >2
           queryString=prefixes+"SELECT ?studentName?BirthDate?gpa\n" +
                        "WHERE { \n" +
                        "?student rdf:type sou:undergraduateStudent.\n" +
                        "?student sou:name?studentName.\n" +
                        "\n" +
                        "OPTIONAL{  \n" +
                        "?student sou:takes sou:Course_A1.\n" +
                        "?student sou:dob?BirthDate.\n" +
                        "}\n" +
                        "OPTIONAL{  \n" +
                        "\n" +
                        "?student sou:student_gpa?gpa.\n"
                       +"FILTER(?gpa>2)}"
                       + "}";                                                     
            break;
        case 4: 
            //ASk quey that asks about Manager it returns true if our ontology contains manager and vice versa
            // we have created separet string to hold its value beacuse it will have different execution 
            String queryAsk = prefixes+"ASK WHERE {\n" +
                "  ?person rdf:type sou:Manager.\n" +
                "}";
                     //Create a SPARQL query execution object on the model
                     QueryExecution askQueryExecution = QueryExecutionFactory.create(queryAsk, model);
                     boolean result = askQueryExecution.execAsk(); 
                     // clear the text area and append result
                     textArea1.setText("");
                     textArea1.append("Result: " + result);
                     textArea1.setEditable(false);
                       
            break;
        case 5:
            //Descripe Query that descripe Elective Courses class             
            String desQ=prefixes+"DESCRIBE sou:ElectiveCourse";
            // Create a SPARQL query execution object on the model
            QueryExecution queryExecution = QueryExecutionFactory.create(desQ, model);
            // Execute the query and obtain the result 
            Model desresult= queryExecution.execDescribe();
            // Iterate over the statements in the result model
            StmtIterator iterator = desresult.listStatements();
                    textArea1.setText(" ");
                    while (iterator.hasNext()) {
                    Statement statement = iterator.next(); 
                    //get the object from the description
                    Resource subject = statement.getSubject();
                    //get subject and remove the url,hust show lirtal ,same thing for predicate 
                    int hashIndex = subject.getURI().lastIndexOf('#');
                    if (hashIndex != -1) {
                     String sub = subject.getURI().substring(hashIndex + 1);
                     textArea1.append("Subject: " + sub+"\n");
                     }
                    int hashIndex1 = statement.getPredicate().getURI().lastIndexOf('#');
                    if (hashIndex1 != -1) {
                     String pre = statement.getPredicate().getURI().substring(hashIndex1 + 1);
                     textArea1.append("Predicate: " + pre+"\n");;
                     }
                     textArea1.append ("Object: " + statement.getObject()+"\n");
                     textArea1.setEditable(false);
                     }
                break;
        case 6:
            //construct query to link any subject and object that have name as presicate
              String ConQ=prefixes+"CONSTRUCT{?subject sou:name ?object}\n" +
                    "WHERE{?subject sou:name ?object}";
            // Create a SPARQL query execution object on the model
            QueryExecution qExecution = QueryExecutionFactory.create(ConQ, model);
            // Execute the query and obtain the result
            Model ConQresult= qExecution.execConstruct();
            // Iterate over the statements in the result model
            StmtIterator ConQiterator = ConQresult.listStatements();
            // Iterate over result
                    textArea1.setText(" ");
                    textArea1.append("Subject              Predicate          Object    \n");
                    while (ConQiterator.hasNext()) {
                    Statement ConQstatement = ConQiterator.next();
                    Resource subject = ConQstatement.getSubject();
                    //remove url
                    int hashIndex = subject.getURI().lastIndexOf('#');
                    if (hashIndex != -1) {
                     String sub = subject.getURI().substring(hashIndex + 1);
                     textArea1.append(sub+"\t");
                     }
                    int hashIndex1 = ConQstatement.getPredicate().getURI().lastIndexOf('#');
                    if (hashIndex1 != -1) {
                     String pre = ConQstatement.getPredicate().getURI().substring(hashIndex1 + 1);
                     textArea1.append( pre+"\t");;
                     }
                     textArea1.append (ConQstatement.getObject()+"\n");
                     textArea1.setEditable(false);
                     }
            break;
        case 7:
            //conjunction query select instructor name of course_A1 union Course_B1 ,and name of Undergraduate Students
            //that live in tanta and take course_A1
           queryString = prefixes+" SELECT  DISTINCT?InstructorName ?StudentName\n" +
           "WHERE{ \n" +
           "{?instructo rdf:type sou:Instructor.\n"+
           "?instructor sou:isTeaching sou:Course_A1.\n"+
           "?instructor sou:name ?InstructorName.\n" +
           "?student rdf:type sou:UndergraduateStudent.\n"+
           "?student sou:name ?StudentName.\n" +
           "FILTER EXISTS{?student sou:address?Tanta.\n"+
                      "?student sou:takes sou:Course_A1.}}\n"+
             "UNION{?instructor sou:isTeaching sou:Course_B1.\n"+
               "?instructor sou:name ?InstructorName}}";
        default:
            break;
    }

    // Execute the queries that have same handle and prepare the results for display in the text area
    try {
        //creates a Query object from the queryString to represents the SPARQL query that will be executed
        Query query = QueryFactory.create(queryString);
        //executing the SPARQL query onthe model,the represents our owl.
        QueryExecution qexec = QueryExecutionFactory.create(query, model);
        //retrive results from ececute select queries
        ResultSetRewindable results = ResultSetFactory.makeRewindable(qexec.execSelect());
        StringBuilder resultBuilder = new StringBuilder();
        // switch case to choose the query to print
        switch (selectedQuery) {
              case 0:
                 resultBuilder.append("-------------------ASU Staff Names------------------------\n");
                 //iterate over all results and create RDFNode to store result,remove uri,and append results to textarea
                  while (results.hasNext()) {
                  QuerySolution sol = results.nextSolution();
                  RDFNode staffNameNode = sol.get("StaffName");

                  if (staffNameNode != null) {
                  String staffName = staffNameNode.toString();
                 
                  int hashIndex = staffName.lastIndexOf('#');
                  if (hashIndex != -1) {
                     staffName = staffName.substring(hashIndex + 1);
                     }
                   resultBuilder.append(staffName).append("\n");
                 }     
            }
                  // Display the query results in the text area
                   textArea1.setText(resultBuilder.toString());
                   textArea1.setEditable(false);
                break;
            case 1:
                 // Process the results
                  resultBuilder.append("-------------------All Instances------------------------\n");
                  while (results.hasNext()) {
                  QuerySolution solution = results.nextSolution();
                  RDFNode allInstancesNode = solution.get("AllInstances");
                  if (allInstancesNode != null) {
                  String allInstances = allInstancesNode.toString();
                  int hashIndex = allInstances.lastIndexOf('#');
                  if (hashIndex != -1) {
                     allInstances = allInstances.substring(hashIndex + 1);
                     }
                   resultBuilder.append(allInstances).append("\n");
                 }
               }
                  // Display the query results in the text area
                   textArea1.setText(resultBuilder.toString());
                   textArea1.setEditable(false);
                break;
            case 2:
                 // Process the results
                  resultBuilder.append("ASU_Departments                      Undergraduate Students count\n");
                  while (results.hasNext()) {
                  QuerySolution solution = results.nextSolution();
                  RDFNode depNode = solution.get("ASU_Departments");
                  RDFNode stNode = solution.get("studentCount");

                  if ((depNode != null)&&(stNode!=null)) {
                  String ASU_Departments = depNode.toString();
                  String studentCount = stNode.toString();
                  int hashIndexasu = ASU_Departments.lastIndexOf('#');
                   
                  if (hashIndexasu != -1) {
                     ASU_Departments = ASU_Departments.substring(hashIndexasu + 1);
                  }
                  int mark = studentCount.indexOf('^');
                  if (mark != -1) {
                    String stnumber = studentCount.substring(0, mark);
                 
                     resultBuilder.append(ASU_Departments).append("\t\t\t");
                     resultBuilder.append(stnumber).append("\n");
                     resultBuilder.append("\n");
                    }
                  }
                }
                  // Display the query results in the text area
                   textArea1.setText(resultBuilder.toString());
                   textArea1.setEditable(false);
                break;
            case 3:
                 // Process the results
                  resultBuilder.append("Student Name             Birth Date                           gpa\n");
                  while (results.hasNext()) {
                  QuerySolution qsol = results.nextSolution();
                  RDFNode stNode = qsol.get("studentName");
                  RDFNode brdNode = qsol.get("BirthDate");
                  RDFNode gpaNode = qsol.get("gpa");
                  if ((brdNode != null)&&(stNode!=null)&&(gpaNode!=null)) {
                  String InName = brdNode.toString();
                  String stName = stNode.toString();
                  String gpa = gpaNode.toString();
                     resultBuilder.append(InName).append("\t\t\t");
                     resultBuilder.append(stName).append("\n");
                     resultBuilder.append(gpa).append("\n");
                     resultBuilder.append("\n");
                  }
               }
                  // Display the query results in the text area
                   textArea1.setText(resultBuilder.toString());
                   textArea1.setEditable(false);
        
                break;
                case 7:
                 // Process the results
                  resultBuilder.append("Instructor Name                                Student Name\n");
                  while (results.hasNext()) {
                  QuerySolution solution = results.nextSolution();
                  RDFNode inNode = solution.get("InstructorName");
                  RDFNode stNode = solution.get("StudentName");
                  if ((inNode != null)&&(stNode!=null)) {
                  String InstructorName = inNode.toString();
                  String StudentName = stNode.toString();
                     resultBuilder.append(InstructorName).append("\t\t\t");
                     resultBuilder.append(StudentName).append("\n");
                     resultBuilder.append("\n");
                  }
               }
                  // Display the query results in the text area
                   textArea1.setText(resultBuilder.toString());
                   textArea1.setEditable(false);
        
                break;
            default:
                 break;
        }
         


    } catch (Exception ex) {
        // Handle any exceptions that occur during query execution
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "An error occurred during query execution: " + ex.getMessage(),
                "Query Error", JOptionPane.ERROR_MESSAGE);
    }









    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_jComboBox1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private java.awt.TextArea textArea1;
    // End of variables declaration//GEN-END:variables
}
